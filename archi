#!/bin/bash
# Copyright 2014 JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set +e

# Initial variables
VERSION="1.0"
TOOLS=(which whoami basename dirname gcc java perl sed cut wget od wc cpio zip unzip tar)
XDALINK="http://forum.xda-developers.com/showthread.php?t=2597220"

ACTIVE_PROJECT=""
ARCH="arm"
CUSER=$(whoami)

ALIGN=4
FULLPERFORMANCE=true

META_INF="META-INF/com/google/android"
UPDATER_SCRIPT_HEAD="updater-script-00_HEAD"
UPDATER_SCRIPT_SYMLINKS="updater-script-10_SYMLINKS"
UPDATER_SCRIPT_PERMISSIONS="updater-script-20_PERMISSIONS"
UPDATER_SCRIPT_EXEC="updater-script-80_EXEC"
UPDATER_SCRIPT_USER="updater-script-85_USER"
UPDATER_SCRIPT_KERNEL="updater-script-90_KERNEL"
UPDATER_SCRIPT_MODEM="updater-script-91_MODEM"
UPDATER_SCRIPT_TAIL="updater-script-99_TAIL"

clear
echo -n "Please wait"

# Before we begin, make sure that all our tools are available
MISSINGTOOLS=""
for TOOL in "${TOOLS[@]}"; do
	echo -n "."
	if [ -z $(which $TOOL) ]; then
		MISSINGTOOLS+=" $TOOL"
	fi
done
echo ""

if [ ! -z "$MISSINGTOOLS" ]; then
	echo "It looks like you don't have required tool(s): $MISSINGTOOLS"
	echo "This check was made through 'which' command"
	echo "Please install missing tool(s) and launch kitchen again"
	exit 1
fi

# Check LONG_BIT for determining host architecture, this is unused for a while
HOSTARCH="$(getconf LONG_BIT)"

# Set common tools
ZIPALIGN="./tools/zipalign/zipalign"

# Navigate to our folder, even if user didn't execute it from the root dir
cd $(dirname $0)

# Make sure our tools are executable
# This is only required if user downloaded zip and permissions are broken (f.e. due to moving files from windows => linux)
chmod -R 755 tools

# Core
PRESS_ENTER() {
	read -p "Press [Enter] key to continue..."
}

# Executes commands given in arguments as root
ROOT_EXECUTE() {
	local CHOICE="y"
	while [ "$CHOICE" != "n" ] && [ "$CHOICE" != "N" ]; do
		if [ "$CUSER" == "root" ]; then
			$*
		else
			echo "Root access is required! $@"
			if [ ! -z $(which sudo) ]; then
				sudo $*
			else
				su -c $*
			fi
		fi
		if [ $? -eq 0 ]; then
			return 0
		else
			read -p "Sorry, something went wrong, error code: $?. Would you like to try again? [Y/n]: " CHOICE
		fi
	done
	case "$CHOICE" in
		n|N)
			echo "Aborting..."
			exit 1
	esac
}

# Sets ACTIVE_PROJECT
DO_SETPROJECT() {
	echo
	echo "You currently don't have any active projects"
	echo "I'll now list you all available projects, which you created in the past"
	echo
	COUNT=0
	for i in $(find . -maxdepth 1 -iname "PROJECT_*" -type d); do
		COUNT=$(expr $COUNT + 1)
		echo "["$COUNT"] - $(basename $i)"
	done
	if [ $COUNT -gt 0 ]; then
		echo "I found $COUNT available projects, and listed them above. Please tell me which one you want to use"
		echo "Write a number of the project, which you want to activate or..."
	else
		echo "Sorry, I didn't find any available project, it looks like you must create a new one"
	fi
	echo
	echo "Write n to create a new project"
	echo "Write x to abort"
	echo -n "CHOICE: "
	read CHOICE
	case "$CHOICE" in
		n|N)
			DO_NEWPROJECT
			;;
		x|X)
			exit 0
			;;
		*)
			if [ $CHOICE -gt $COUNT ] || [ $CHOICE -lt 1 ]; then
				echo "Error, invalid selection"
				return 1
			fi
			COUNT=$CHOICE
			for i in $(find . -maxdepth 1 -iname "PROJECT_*" -type d); do
				COUNT=$(expr $COUNT - 1)
				if [ $COUNT -eq 0 ]; then
					ACTIVE_PROJECT=$(basename $i)
					break
				fi
			done
			if [ -z $ACTIVE_PROJECT ]; then
				echo "Error, you didn't select anything"
				return 1
			else
				echo "OK, current active project is now $ACTIVE_PROJECT"
			fi
	esac
	return 0
}

# Creates new project
DO_NEWPROJECT() {
	clear
	echo "You can create a new bare bones project or a project based on a base drop"
	echo "In most situations you want to extract the base, but bare bones project may be useful i.e. for deodexing a set of apps only"
	echo
	echo "b - Create bare bones project"
	echo "e - Extract a ROM and use as base"
	read -p "Which one you want to create? [b/e]: " CHOICE
	case "$CHOICE" in
		e|E)
			;;
		*)
			ACTIVE_PROJECT="PROJECT_"
			ACTIVE_PROJECT+="$(date '+%m%d%y_%H%M%S')"
			echo "Creating bare $ACTIVE_PROJECT"
			mkdir -p $ACTIVE_PROJECT/system
			return 0
	esac
	echo "ArchiKitchen currently supports system in system.img and system.img.ext4 format"
	echo "Please put proper base drop in base_drops folder"
	echo "It can be standalone system.img(.ext4) file, or an archive, which contains such file"
	echo "Are you ready?"
	PRESS_ENTER
	SEARCH=true
	while ($SEARCH); do
		echo "Looking for system.img..."
		SYSTEMDIR=""
		SYSTEMFILE=""
		for f in $(find base_drops -type f); do
			FILE=$(basename $f)
			case "$FILE" in
				"system.img")
					SYSTEMDIR=$(dirname $f)
					SYSTEMFILE=$(basename $f)
					echo "Found $SYSTEMDIR/$SYSTEMFILE, which should be the proper file"
					SEARCH=false
					break
					;;
				"system.img.ext4")
					SYSTEMDIR=$(dirname $f)
					SYSTEMFILE=$(basename $f)
					echo "Found $SYSTEMDIR/$SYSTEMFILE, which should be the proper file"
					SEARCH=false
					break
					;;
			esac
		done
		if [ -z "$SYSTEMFILE" ]; then
			echo "No system.img found"
			echo
			echo "r - refresh"
			echo "d - decompress one of the files, if it should contain system.img"
			echo "x - abort"
			echo -n "CHOICE: "
			read CHOICE
			case "$CHOICE" in
				r|R)
					clear
					;;
				d|D)
					COUNT=0
					for i in $(find base_drops/ -type f); do
						COUNT=$(expr $COUNT + 1)
						echo "["$COUNT"] - $(dirname $i)/$(basename $i)"
					done
					echo "Please tell me which file should contain system.img"
					echo -n "CHOICE: "
					read CHOICE
					if [ $CHOICE -gt $COUNT ] || [ $CHOICE -lt 1 ]; then
						echo "Error, invalid selection"
						exit 1
					fi
					COUNT=$CHOICE
					for i in $(find base_drops/ -type f); do
						COUNT=$(expr $COUNT - 1)
						if [ $COUNT -eq 0 ]; then
							FILE="$i"
							break
						fi
					done
					echo "Extracting everything from $FILE"

					# TODO: We should find more universal way for finding out type of the file
					tar xvf $FILE -C base_drops/ || unzip $FILE -d base_drops/

					if [ $? -ne 0 ]; then
						echo "Error, it looks like this file format isn't supported"
						return 1
					fi
					;;
				x|X)
					return 1
					;;
				*)
					echo "No valid selection"
					return 1
			esac
		fi
	done

	ACTIVE_PROJECT="PROJECT_"
	ACTIVE_PROJECT+="$(date '+%m%d%y_%H%M%S')"
	echo "Creating $ACTIVE_PROJECT"
	mkdir -p $ACTIVE_PROJECT/system
	cp $SYSTEMDIR/boot.img $ACTIVE_PROJECT/boot.img

	# TODO: Support non-ext4 filesystems
	FS="ext4"

	cp $SYSTEMDIR/$SYSTEMFILE $ACTIVE_PROJECT/system.img
	for EXTRA in 'cache.img' 'modem.bin'; do
		if [ -e $SYSTEMDIR/$EXTRA ]; then
			echo "Found extra $EXTRA file"
			echo "Do you want to include this file in your ROM?"
			case "$EXTRA" in
				"cache.img")
					echo "This file usually contains CSC stuff. Say yes if you're unsure"
					;;
				"modem.bin")
					echo "This file usually contains low-level binary code responsible for mobile connection. Say no if you're unsure"
					;;
			esac
			echo
			read -p "Include? [Y/n]: " CHOICE
			case "$CHOICE" in
				n|N) ;;
				*) cp $SYSTEMDIR/$EXTRA $ACTIVE_PROJECT/$EXTRA
			esac
		fi
	done
	for PARTITION in 'system.img' 'cache.img'; do
		if [ -e $ACTIVE_PROJECT/$PARTITION ]; then
			mv -f $ACTIVE_PROJECT/$PARTITION $ACTIVE_PROJECT/$PARTITION.$FS
		fi
	done

	DO_MAKESURE_WEHAVE_SIMG2IMG
	DO_SIMG2IMG_ALL
	rm -rf $ACTIVE_PROJECT/META-INF # We don't want old junk from cache or system partitions, it's invalid anyway
	DO_MAKESURE_WEHAVE_METAINF
	CHECK_KERNEL
	CHECK_MODEM
	BUILD_UPDATER_SCRIPT
}

# Converts all stock images to mountable linux ones
DO_SIMG2IMG_ALL() {
	for f in $(find $ACTIVE_PROJECT -maxdepth 1 -type f -iname "*.ext4"); do
		echo "Converting and mounting $(basename $f)"
		./temp/simg2img $f $f.simg2img
		rm -f $f
		mkdir -p /tmp/ArchiKitchenLOOP
		ROOT_EXECUTE "mount -o loop $f.simg2img /tmp/ArchiKitchenLOOP"
		echo "Extracting files from $(basename $f)"
		IMGNAME=$(basename "$f" | cut -d'.' -f1)
		case "$IMGNAME" in
			"cache")
				if [ -e /tmp/ArchiKitchenLOOP/recovery/sec_csc.zip ]; then
					echo "Found common sec_csc.zip file, this is CSC provided by Samsung, including it"
					ROOT_EXECUTE "unzip -q /tmp/ArchiKitchenLOOP/recovery/sec_csc.zip -d $ACTIVE_PROJECT/"
				fi
				;;
			*)
				ROOT_EXECUTE "cp -R /tmp/ArchiKitchenLOOP/* $ACTIVE_PROJECT/$IMGNAME/"
		esac
		ROOT_EXECUTE "umount /tmp/ArchiKitchenLOOP"
		rm -f $f.simg2img
	done
	ROOT_EXECUTE "chown -hR $CUSER.$CUSER $ACTIVE_PROJECT"
}

# Sets up kernel
CHECK_KERNEL() {
	if [ ! -e $ACTIVE_PROJECT/$META_INF/updater-script ] || ([ $(grep -i "boot.img" $ACTIVE_PROJECT/$META_INF/updater-script | wc -l) -eq 0 ] && [ $(grep -i "zImage" $ACTIVE_PROJECT/$META_INF/updater-script | wc -l) -eq 0 ]); then
		echo "WARNING! No kernel path found in current updater-script"
		echo "This is typical when you're converting image-based rom to zip-based rom"
		local MODEL=$(grep -i "ro.product.device" $ACTIVE_PROJECT/system/build.prop | head -n 1 | cut -d'=' -f2)
		echo "Detected ROM model: $MODEL"
		echo "Make sure it's proper model for your device!"
		PRESS_ENTER
		if [ -e files/product/$MODEL/KERNEL ]; then
			KERNELPATH=$(cat files/product/$MODEL/KERNEL)
		else
			echo "This model does not yet exist in our database"
			echo "Please write your kernel path manually. Example of kernel path from GT-I9300: /dev/block/mmcblk0p5"
			echo -n "Kernel path for your model: "
			read KERNELPATH
		fi
		echo "Based on model above and our little database, your kernel path should be $KERNELPATH"
		echo "MAKE SURE IT'S CORRECT, OVERWRITING WRONG PATHS MAY LEAD TO SOFT AND HARD BRICKS"
		PRESS_ENTER
		echo "\"$KERNELPATH\");" >> $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_KERNEL
		echo "OK, This is the final effect:"
		cat $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_KERNEL
		echo "Make sure that path and syntax is correct, if not, modify it manually through file $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_KERNEL BEFORE you proceed to the next step"
		PRESS_ENTER
	fi
}

# Sets up modem
CHECK_MODEM() {
	if [ -e $ACTIVE_PROJECT/modem.bin ]; then
		echo "Modem.bin file found"
		local MODEL=$(grep -i "ro.product.device" $ACTIVE_PROJECT/system/build.prop | head -n 1 | cut -d'=' -f2)
		echo "Detected ROM model: $MODEL"
		echo "Make sure it's proper model for your device!"
		PRESS_ENTER
		if [ -e files/product/$MODEL/MODEM ]; then
			MODEMPATH=$(cat files/product/$MODEL/MODEM)
		else
			echo "This model does not yet exist in our database"
			echo "Please write your modem path manually. Example of modem path from GT-I9300: /dev/block/mmcblk0p7"
			echo -n "Modem path for your model: "
			read MODEMPATH
		fi
		echo "Based on model above and our little database, your modem path should be $MODEMPATH"
		if [ "$MODEMPATH" == "NULL" ]; then
			echo "WARNING! Your model path is NULL, which means that your device does not support flashing modem directly"
			echo "Sorry but it's not possible to include it in your ROM"
			rm -f $ACTIVE_PROJECT/modem.bin
			rm -f $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_MODEM
		else
			echo "MAKE SURE IT'S CORRECT, OVERWRITING WRONG PATHS MAY LEAD TO SOFT AND HARD BRICKS"
			PRESS_ENTER
			echo "\"$MODEMPATH\");" >> $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_MODEM
			echo "OK, This is the final effect:"
			cat $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_MODEM
			echo "Make sure that path and syntax is correct, if not, modify it manually through file $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_MODEM BEFORE you proceed to the next step"
		fi
		PRESS_ENTER
	else
		rm -f $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_MODEM
	fi
}

# Compiles simg2img, if we don't have it yet
DO_MAKESURE_WEHAVE_SIMG2IMG() {
	if [ ! -e temp/simg2img ]; then
		mkdir -p temp
		gcc -O2 tools/simg2img/sparse_crc32.c tools/simg2img/simg2img.c -o temp/simg2img
	fi
}

# Creates META-INF, if not yet available
DO_MAKESURE_WEHAVE_METAINF() {
	mkdir -p $ACTIVE_PROJECT/$META_INF
	cp files/product/generic/update-binary $ACTIVE_PROJECT/$META_INF/update-binary
	for UPDATER_SCRIPT in files/product/generic/updater-scripts/*; do
		cp "$UPDATER_SCRIPT" "$ACTIVE_PROJECT/$META_INF/"
	done
}

# Adds updater-scripts from $1 to our ACTIVE_PROJECT
UPDATER_SCRIPT_ADD() {
	local FOLDER="$1"
	local FILE=""
	for UPDATER_SCRIPT in $FOLDER/updater-script-*; do
		FILE=$(basename $UPDATER_SCRIPT)
		echo "" >> $ACTIVE_PROJECT/$META_INF/$FILE # This is to ensure that we have a new line BEFORE appending"
		cat "$UPDATER_SCRIPT" >> $ACTIVE_PROJECT/$META_INF/$FILE
		echo "" >> $ACTIVE_PROJECT/$META_INF/$FILE # This is to ensure that we have a new line AFTER appending"
		sed -i '/^$/d' $ACTIVE_PROJECT/$META_INF/$FILE # This removes safety lines added above
	done
}

# Removes updater-scripts from $1 from our ACTIVE_PROJECT
UPDATER_SCRIPT_DEL() {
	local UNIQUECHAR="!"
	local FOLDER="$1"
	local FILE=""
	local CMD=""
	for UPDATER_SCRIPT in $FOLDER/updater-script-*; do
		# TODO: I know that this is slow and inefficient way, however at least I can prove that it's stable and secure
		# If anybody manages to delete lines from $ACTIVE_PROJECT/$META_INF/$FILE, which exist in $UPDATER_SCRIPT, please contribute! :)
		# Unfortunately I failed using sed, so I'm out of better ideas :(
		FILE=$(basename $UPDATER_SCRIPT)
		echo -n "" > "$ACTIVE_PROJECT/$FILE"
		cat "$ACTIVE_PROJECT/$META_INF/$FILE" | while read line; do
			if [ $(grep -q "$line" "$UPDATER_SCRIPT"; echo $?) -eq 1 ]; then
				echo "$line" >> "$ACTIVE_PROJECT/$FILE"
			fi
		done
		mv -f "$ACTIVE_PROJECT/$FILE" "$ACTIVE_PROJECT/$META_INF/$FILE"
	done
}

# Builds final updater-script from our segments
BUILD_UPDATER_SCRIPT() {
	local HEADER=""
	echo -n "" > $ACTIVE_PROJECT/$META_INF/updater-script
	for UPDATER_SCRIPT in $ACTIVE_PROJECT/$META_INF/updater-script-*; do
		HEADER="# "
		HEADER+=$(basename "$UPDATER_SCRIPT")
		echo "" >> $ACTIVE_PROJECT/$META_INF/updater-script # This is to ensure that we have a new line BEFORE appending"
		echo "$HEADER" >> "$ACTIVE_PROJECT/$META_INF/updater-script"
		cat "$UPDATER_SCRIPT" >> "$ACTIVE_PROJECT/$META_INF/updater-script"
		echo "" >> $ACTIVE_PROJECT/$META_INF/updater-script # This is to ensure that we have a new line AFTER appending"
	done
	sed -i '/^$/d' $ACTIVE_PROJECT/$META_INF/updater-script # This removes safety lines added above
}

# Removes invalid generic permissions
FIX_PERMISSIONS() {
	echo "Right now you're using generic list of permissions based on multiple devices"
	echo "It's usually a good idea to remove invalid permissions, by invalid I mean permissions to non-existent files or folders"
	read -p "Do you want to remove invalid permissions? [Y/n]: " CHOICE
	case "$CHOICE" in
		n|N) ;;
		*)
			cp $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_PERMISSIONS $ACTIVE_PROJECT/updater-script-TEMP
			rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
			for perm in $(cat $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_PERMISSIONS | cut -d'"' -f2); do
				if [ -z "$perm" ]; then
					continue
				elif [ ! -e $ACTIVE_PROJECT$perm ]; then
					echo $perm >> $ACTIVE_PROJECT/updater-script-TEMP-LIST
					grep -Ev "$perm" $ACTIVE_PROJECT/updater-script-TEMP > $ACTIVE_PROJECT/updater-script-TEMP2
					mv -f $ACTIVE_PROJECT/updater-script-TEMP2 $ACTIVE_PROJECT/updater-script-TEMP
				fi
			done
			if [ ! -e $ACTIVE_PROJECT/updater-script-TEMP-LIST ]; then
				echo "No invalid permissions found, your updater-script is clean!"
				rm -f $ACTIVE_PROJECT/updater-script-TEMP
			else
				echo "OK, permissions for following files have been removed from your updater-script: "
				echo "-=-= REMOVED PERMISSIONS START =-=-"
				cat $ACTIVE_PROJECT/updater-script-TEMP-LIST
				echo "-=-= REMOVED PERMISSIONS EOF =-=-"
				rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
				mv -f $ACTIVE_PROJECT/updater-script-TEMP $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_PERMISSIONS
			fi
			PRESS_ENTER
	esac
}

# Removes invalid generic symlinks, adds local ones
FIX_SYMLINKS() {
	echo "Right now you're probably using generic list of symlinks based on multiple devices"
	echo "It's usually a good idea to remove invalid symlinks, by invalid I mean symlinks to non-existent files or folders"
	read -p "Do you want to remove invalid symlinks? [Y/n]: " CHOICE
	case "$CHOICE" in
		n|N) ;;
		*)
			cp $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS $ACTIVE_PROJECT/updater-script-TEMP
			rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
			for symlink in $(cat $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS | cut -d'"' -f2); do
				if [ -z "$line" ]; then
					continue
				elif [ ! -e $ACTIVE_PROJECT$symlink ] && [ ! -e $ACTIVE_PROJECT/system/bin/$symlink ] && [ ! -e $ACTIVE_PROJECT/system/xbin/$symlink ] && [ ! -e $ACTIVE_PROJECT/system/lib/$symlink ] && [ ! -e $ACTIVE_PROJECT/system/ttf/$symlink ] ; then
					echo $symlink >> $ACTIVE_PROJECT/updater-script-TEMP-LIST
					grep -Ev "$symlink" $ACTIVE_PROJECT/updater-script-TEMP > $ACTIVE_PROJECT/updater-script-TEMP2
					mv -f $ACTIVE_PROJECT/updater-script-TEMP2 $ACTIVE_PROJECT/updater-script-TEMP
				fi
			done
			if [ ! -e $ACTIVE_PROJECT/updater-script-TEMP-LIST ]; then
				echo "No invalid symlinks found, your updater-script is clean!"
				rm -f $ACTIVE_PROJECT/updater-script-TEMP
			else
				echo "OK, symlinks for following files have been removed from your updater-script: "
				echo "-=-= REMOVED SYMLINKS START =-=-"
				cat $ACTIVE_PROJECT/updater-script-TEMP-LIST
				echo "-=-= REMOVED SYMLINKS EOF =-=-"
				rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
				mv -f $ACTIVE_PROJECT/updater-script-TEMP $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS
			fi
			PRESS_ENTER
			echo ""
	esac

	echo "We can also add local symlinks from your project, these are available only if your project is based on stock image"
	echo "It's usually a good idea to add missing symlinks, if they're available, in worst case we won't be able to find anything"
	read -p "Do you want to include local symlinks? [Y/n]: " CHOICE
	case "$CHOICE" in
		n|N) ;;
		*)
			local TARGET=""
			local REALPATH=""
			rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
			echo "" >> $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS
			for symlink in $(find $ACTIVE_PROJECT/ -type l | sort); do
				TARGET=$(readlink $symlink)
				REALPATH="/" # TODO: We can assume that we have only one slash (/) before the right pattern ($ACTIVE_PROJECT)
				REALPATH+=$(echo $symlink | cut -d'/' -f2-) # If there's a way to determine that without making such assumption, it would be great
				echo "symlink(\""$TARGET"\", \""$REALPATH"\");" >> $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS
				echo "$REALPATH -> $TARGET" >> $ACTIVE_PROJECT/updater-script-TEMP-LIST
			done
			if [ ! -e $ACTIVE_PROJECT/updater-script-TEMP-LIST ]; then
				echo "No local symlinks found, it looks like your build is not based on stock image"
			else
				echo "OK, following local symlinks have been added to your updater-script: "
				echo "-=-= ADDED SYMLINKS START =-=-"
				cat $ACTIVE_PROJECT/updater-script-TEMP-LIST
				echo "-=-= ADDED SYMLINKS EOF =-=-"
				rm -f $ACTIVE_PROJECT/updater-script-TEMP-LIST
			fi
			PRESS_ENTER
			echo ""
	esac

	echo "Please wait..."
	# Remove duplicated symlinks and sort them
	cat $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS | sort -u > $ACTIVE_PROJECT/updater-script-TEMP
	mv -f $ACTIVE_PROJECT/updater-script-TEMP $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS

	# Remove local symlinks, we don't need them to pollute our ROM
	find $ACTIVE_PROJECT/ -type l -delete

	# Remove empty lines, if any
	sed -i '/^$/d' $ACTIVE_PROJECT/$META_INF/$UPDATER_SCRIPT_SYMLINKS
}

# Changes architecture, this covers only utilities available to both of them
CHANGE_ARCHITECTURE() {
	case "$ARCH" in
		"arm")
			ARCH="x86"
			;;
		"x86")
			ARCH="arm"
			;;
		*)
			ARCH="arm"
	esac
}

# Extracts the kernel
KERNEL_EXTRACT() {
	if [ ! -e $ACTIVE_PROJECT/kernel ]; then
		mkdir -p temp
		if [ ! -e temp/mkbootimg ]; then
			cd tools/kernel/mkbootimg
			make
			if [ ! -e mkbootimg ] || [ ! -e unpackbootimg ]; then
				echo "ERROR! Something went wrong with compilation of mkbootimg!"
				PRESS_ENTER
				return 1
			fi
			cp mkbootimg ../../../temp/mkbootimg
			cp unpackbootimg ../../../temp/unpackbootimg
			make clean
			cd ../../..
		fi
		if [ -e $ACTIVE_PROJECT/boot.img ]; then
			rm -rf $ACTIVE_PROJECT/kernel
			mkdir -p $ACTIVE_PROJECT/kernel
			temp/unpackbootimg -i $ACTIVE_PROJECT/boot.img -o $ACTIVE_PROJECT/kernel
			mkdir -p $ACTIVE_PROJECT/kernel/ramdisk
			if [ -e $ACTIVE_PROJECT/kernel/boot.img-ramdisk.gz ]; then
				cd $ACTIVE_PROJECT/kernel/ramdisk
				#TODO: Handle non-gz ramdisk as well, but not now...
				gunzip -c ../boot.img-ramdisk.gz | cpio -i
				cd ../../..
			fi
		else
			echo "No kernel found!"
			PRESS_ENTER
			return 1
		fi
	fi
}

# Repacks the kernel from previously extracted one
KERNEL_REPACK() {
	if [ -e $ACTIVE_PROJECT/kernel ]; then
		if [ -e $ACTIVE_PROJECT/kernel/ramdisk ]; then
			cd $ACTIVE_PROJECT/kernel/ramdisk
			find . | cpio -o -H newc | gzip > ../boot.img-ramdisk-NEW.gz
			cd ../../..
			temp/mkbootimg --kernel $ACTIVE_PROJECT/kernel/boot.img-zImage --ramdisk $ACTIVE_PROJECT/kernel/boot.img-ramdisk-NEW.* -o $ACTIVE_PROJECT/temp.img
		else
			temp/mkbootimg --kernel $ACTIVE_PROJECT/kernel/boot.img-zImage --ramdisk $ACTIVE_PROJECT/kernel/boot.img-ramdisk.* -o $ACTIVE_PROJECT/temp.img
		fi
		mv -f $ACTIVE_PROJECT/temp.img $ACTIVE_PROJECT/boot.img
		rm -rf $ACTIVE_PROJECT/kernel
	fi
}

# Aborts kernel repacking
KERNEL_ABORT() {
	rm -rf $ACTIVE_PROJECT/kernel
	rm -f $ACTIVE_PROJECT/temp.img
}

# Adds ArchiDroid's Init.d
ARCHIDROID_INITD() {
	if [ ! -e $ACTIVE_PROJECT/system/bin/debuggerd.real ]; then
		mv -f $ACTIVE_PROJECT/system/bin/debuggerd $ACTIVE_PROJECT/system/bin/debuggerd.real
		cp -R files/archidroid/initd/system/* $ACTIVE_PROJECT/system/
		UPDATER_SCRIPT_ADD "files/archidroid/initd/updater-scripts"
	else
		mv -f $ACTIVE_PROJECT/system/bin/debuggerd.real $ACTIVE_PROJECT/system/bin/debuggerd
		UPDATER_SCRIPT_DEL "files/archidroid/initd/updater-scripts"
	fi
	BUILD_UPDATER_SCRIPT
}

# Adds Init.d
INITD() {
	KERNEL_EXTRACT
	if [ -e kernel/ramdisk/init.rc ]; then
		sed -i -e '0,/class_start /s//start sysinit\n\n    class_start /' kernel/ramdisk/init.rc
		sed -i -e 's/service media /service sysinit \/system\/bin\/logwrapper \/system\/xbin\/busybox run-parts \/system\/etc\/init.d\n    disabled\n    oneshot\n\nservice media /' kernel/ramdisk/init.rc
		KERNEL_REPACK
		cp -R files/initd/system/* $ACTIVE_PROJECT/system/
		UPDATER_SCRIPT_ADD "files/initd/updater-scripts"
	else
		echo "ERROR, no init.rc found?!"
		rm -rf kernel
		PRESS_ENTER
		return 1
	fi
}

BUILD() {
	local IGNOREDFILES="$META_INF/updater-script-*"
	local EXPERT=false
	for ARG in $@; do
		case "$ARG" in
			"EXPERT")
				EXPERT=true
		esac
	done
	if !($EXPERT); then
		FIX_PERMISSIONS
		FIX_SYMLINKS
		BUILD_UPDATER_SCRIPT
		echo "Sometimes kitchen may produce an incorrect updater-script file, that's why you're asked to review updater-script and eventually fix it if needed BEFORE building ROM"
		echo "Updater-script is based on so-called 'segments' available in the same directory - $META_INF"
		echo "Are you ready?"
		PRESS_ENTER
		echo "-=-= UPDATER-SCRIPT START =-=-"
		cat $ACTIVE_PROJECT/$META_INF/updater-script
		echo "-=-= UPDATER-SCRIPT EOF =-=-"
		read -p "Are you REALLY sure that above updater-script is correct? ESPECIALLY block-based paths? [Y/n]: " CHOICE
		case "$CHOICE" in
			n|N)
				echo "OK, correct your updater-script and/or it's segments and come back when you're finished"
				PRESS_ENTER
				return 0
		esac
	fi
	local COMPLEVEL="1"
	echo
	echo "Which compression level do you want to use?"
	echo "0 - Store (fastest method, no compression at all)"
	echo "1 - Fastest (fastest type of compression, this is default suggested mode)"
	echo "9 - Best (slowest, maximum compression)"
	echo "You can also type any number between 0-9"
	read -p "CHOICE: " CHOICE
	case "$CHOICE" in
		[0-9]) COMPLEVEL="$CHOICE"
	esac
	cd $ACTIVE_PROJECT
	zip -ry -$COMPLEVEL $ACTIVE_PROJECT.zip . -x $IGNOREDFILES
	cd ..
	mkdir -p OUTPUT_ZIP
	mv -f $ACTIVE_PROJECT/$ACTIVE_PROJECT.zip OUTPUT_ZIP/$ACTIVE_PROJECT.zip
	echo "Done, your ROM is available in OUTPUT_ZIP/$ACTIVE_PROJECT.zip"
	read -p "Rename it? [N/y]: " CHOICE
	case "$CHOICE" in
		y|Y)
			read -p "New name: " NAME
			mv -f OUTPUT_ZIP/$ACTIVE_PROJECT.zip OUTPUT_ZIP/$NAME
	esac
	echo "All done, your ROM should be ready!"
	echo "Thank you for using ArchiKitchen!"
	PRESS_ENTER
	exit 0
}

DEODEX() {
	local API=$(grep "ro.build.version.sdk" $ACTIVE_PROJECT/system/build.prop | cut -d'=' -f2)
	echo "Detected API level $API"
	echo "Usually you don't want to change this value"
	read -p "Change it? [N/y]: " CHOICE
	case "$CHOICE" in
		y|Y) read -p "Your selected API level: " API ;;
	esac
	case "$API" in
		[0-9]*) ;;
		*)
			echo "Sorry, it looks like API level is invalid"
			PRESS_ENTER
			return 1
	esac
	for f in $(find $ACTIVE_PROJECT -type f -iname "*.odex"); do
		local FILE=$(basename $f)
		local FILEDIR=$(dirname $f)
		echo "Deodexing $FILE"
		echo "Disassembling $FILE..."
		java -Xmx512m -jar tools/smali/baksmali.jar -a $API -d $ACTIVE_PROJECT/system/framework -x $FILEDIR/$FILE
		if [ $? -ne 0 ]; then
			echo "ERROR DEODEXING $FILE, ABORTING!"
			rm -rf out
			PRESS_ENTER
			return 1
		fi
		echo "Assembling into classes.dex..."
		java -Xmx512m -jar tools/smali/smali.jar -a $API -o classes.dex out
		if [ ! -e classes.dex ]; then
			echo "ERROR DEODEXING $FILE, ABORTING!"
			rm -rf out
			PRESS_ENTER
			return 1
		fi
		FILE=$(echo $FILE | rev | cut -d'.' -f2- | rev)
		local FOUND=false
		for EXTENSION in "jar" "apk"; do
			if [ -e $FILEDIR/$FILE.$EXTENSION ]; then
				echo "Packing back into $FILE.$EXTENSION..."
				zip -rq $FILEDIR/$FILE.$EXTENSION classes.dex
				rm -f classes.dex
				FOUND=true
				break
			fi
		done
		if (! $FOUND); then
			echo "ERROR, No output found?!"
			rm -rf out
			rm -f classes.dex
			PRESS_ENTER
			return 1
		fi
		rm -f $f
		rm -rf out
	done
	echo "Deodexing finished"
	PRESS_ENTER
}

ZIPALIGN_APK() {
	echo "Zipaligning $(basename "$1")..."
	"$ZIPALIGN" -f "$ALIGN" "$1" "$1.zipaligned" >/dev/null 2>&1 && mv -f "$1.zipaligned" "$1"
	return $?
}

ZIPALIGN() {
	if ($FULLPERFORMANCE); then
		for APK in $(find $ACTIVE_PROJECT/system -type f -iname "*.apk"); do
			ZIPALIGN_APK "$APK" &
		done
		wait
	else
		for APK in $(find $ACTIVE_PROJECT/system -type f -iname "*.apk"); do
			ZIPALIGN_APK "$APK"
		done
	fi
	echo
	echo "Zipaligning finished!"
	PRESS_ENTER
}

ROOT() {
	if [ ! -e $ACTIVE_PROJECT/system/xbin/su ]; then
		mkdir -p $ACTIVE_PROJECT/system/xbin
		cp -R files/root/system/* $ACTIVE_PROJECT/system/
		cp -R files/root/$ARCH/* $ACTIVE_PROJECT/
		cp $ACTIVE_PROJECT/system/xbin/su $ACTIVE_PROJECT/system/xbin/daemonsu
		mkdir -p $ACTIVE_PROJECT/system/bin/.ext
		cp $ACTIVE_PROJECT/system/xbin/su $ACTIVE_PROJECT/system/bin/.ext/.su
		UPDATER_SCRIPT_ADD "files/root/updater-scripts"
	else
		rm -f $ACTIVE_PROJECT/system/app/Superuser.apk
		rm -f $ACTIVE_PROJECT/system/xbin/su
		rm -f $ACTIVE_PROJECT/system/xbin/daemonsu
		rm -f $ACTIVE_PROJECT/system/bin/.ext/.su
		rm -f $ACTIVE_PROJECT/system/etc/init.d/99SuperSUDaemon
		rm -f $ACTIVE_PROJECT/system/etc/.installed_su_daemon
		UPDATER_SCRIPT_DEL "files/root/updater-scripts"
	fi
	BUILD_UPDATER_SCRIPT
}

BOOTANIMATION() {
	if [ ! -e $ACTIVE_PROJECT/system/media/bootanimation.zip ]; then
		mv -f $ACTIVE_PROJECT/system/bin/bootanimation $ACTIVE_PROJECT/system/bin/bootanimation.orig
		cp -R files/bootanimation/$ARCH/* $ACTIVE_PROJECT/
		cp -R files/bootanimation/common/* $ACTIVE_PROJECT/
	else
		mv -f $ACTIVE_PROJECT/system/bin/bootanimation.orig $ACTIVE_PROJECT/system/bin/bootanimation
		rm -f $ACTIVE_PROJECT/system/media/bootanimation.zip
	fi
}

BUSYBOX() {
	if [ ! -e $ACTIVE_PROJECT/system/xbin/busybox ]; then
		mkdir -p $ACTIVE_PROJECT/system/xbin
		cp -R files/busybox/$ARCH/* $ACTIVE_PROJECT/
		UPDATER_SCRIPT_ADD "files/busybox/updater-scripts"
	else
		rm -f $ACTIVE_PROJECT/system/xbin/busybox
		UPDATER_SCRIPT_DEL "files/busybox/updater-scripts"
	fi
	BUILD_UPDATER_SCRIPT
}

ADB() {
	if [ -e $ACTIVE_PROJECT/kernel/ramdisk ]; then
		if [ $(grep "ro.adb.secure=1" $ACTIVE_PROJECT/kernel/ramdisk/default.prop | wc -l) -gt 0 ]; then
			sed -i 's/ro.adb.secure=1/ro.adb.secure=0/g' $ACTIVE_PROJECT/kernel/ramdisk/default.prop
			sed -i 's/ro.secure=1/ro.secure=0/g' $ACTIVE_PROJECT/kernel/ramdisk/default.prop
		else
			sed -i 's/ro.adb.secure=0/ro.adb.secure=1/g' $ACTIVE_PROJECT/kernel/ramdisk/default.prop
			sed -i 's/ro.secure=0/ro.secure=1/g' $ACTIVE_PROJECT/kernel/ramdisk/default.prop
		fi
	fi
}

PRINT_BANNER() {
	echo "ArchiKitchen version $VERSION - developed by JustArchi"
	echo "Original thread: $XDALINK"
	echo "--------------------------------------------------------------------------------"
}

PRINT_PROJECT_STATUS() {
	ALLFINE=true
	if [ -d $ACTIVE_PROJECT/kernel ]; then
		ALLFINE=false
		echo "WARNING: Unpacked kernel found"
	fi
	if [ ! -f $ACTIVE_PROJECT/boot.img ]; then
		ALLFINE=false
		echo "WARNING: No boot.img found, ROM will not boot properly"
	fi
	if [ ! -d $ACTIVE_PROJECT/META-INF ]; then
		ALLFINE=false
		echo "WARNING: No META-INF folder found, this is not a ROM"
	fi
	echo -n "Project status: "
	if ($ALLFINE); then
		echo "OK"
	else
		echo "WARNING"
	fi
	echo "--------------------------------------------------------------------------------"
}

PRINT_ROM_STATUS() {
	echo "Architecture: [$ARCH] "
	echo

	echo -n "ArchiDroid Init.d? "
	if [ ! -e $ACTIVE_PROJECT/system/bin/debuggerd.real ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	echo -n "Deodexed? "
	if [ -e $ACTIVE_PROJECT/system/framework/framework.odex ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	echo -n "Zipaligned? "
	"$ZIPALIGN" -c $ALIGN $ACTIVE_PROJECT/system/framework/framework-res.apk
	if [ $? -ne 0 ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	echo -n "Rooted? "
	if [ ! -e $ACTIVE_PROJECT/system/xbin/su ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	echo -n "Busybox? "
	if [ ! -e $ACTIVE_PROJECT/system/xbin/busybox ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	echo -n "Custom Bootanimation? "
	if [ ! -e $ACTIVE_PROJECT/system/media/bootanimation.zip ]; then
		echo "[NO]"
	else
		echo "[YES]"
	fi
	if [ -e $ACTIVE_PROJECT/kernel/ramdisk ]; then
		echo "--------------------------------------------------------------------------------"
		echo -n "ADB? "
		if [ $(grep "ro.adb.secure=0" $ACTIVE_PROJECT/kernel/ramdisk/default.prop | wc -l) -gt 0 ]; then
			echo "[INSECURE]"
		else
			echo "[SECURE]"
		fi
		echo -n "Kernel Init.d? "
		if [ $(grep "sysinit" $ACTIVE_PROJECT/kernel/ramdisk/init.rc | wc -l) -gt 0 ]; then
			echo "[YES]"
		else
			echo "[NO]"
		fi
	fi
	echo "--------------------------------------------------------------------------------"
}

PRINT_SWITCHES() {
	echo "a   - Change architecture (arm/x86)"
	echo
	echo "adi - Enable/Disable ArchiDroid Init.d (software debuggerd hook)"
	echo
	echo "d   - Deodex Everything"
	echo "z   - Zipalign Everything"
	echo "r   - Enable/Disable Root"
	echo "b   - Enable/Disable Busybox"
	echo "ba  - Enable/Disable Custom Bootanimation"
	echo "-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-"
	if [ -e $ACTIVE_PROJECT/kernel/ramdisk ]; then
		echo "kr	- Repack kernel (apply all ramdisk changes)"
		echo "ka	- Abort repacking (abort all ramdisk changes)"
		echo
		echo "i	- Add Init.d Support (Bugged?) (hardware kernel hook)"
		echo "adb	- Enable/Disable insecure ADB"
	elif [ -e $ACTIVE_PROJECT/boot.img ]; then
		echo "ku	- Unpack kernel (this enables more options!)"
	fi
	echo "-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-"
	echo "bb	- Build ROM (normal suggested mode)"
	echo "bbe	- Build ROM (expert mode, won't make any checks if your project is OK)"
	echo "--------------------------------------------------------------------------------"
	echo "ak	- Change ArchiKitchen settings"
	echo "x	- Exit"
	echo "--------------------------------------------------------------------------------"
}

PAGE_SETTINGS() {
	while :; do
		clear
		PRINT_BANNER
		echo -n "Full performance: "
		if ($FULLPERFORMANCE); then
			echo "[YES]"
		else
			echo "[NO]"
		fi
		echo "--------------------------------------------------------------------------------"
		echo "Full performance mode tries to finish common ArchiKitchen tasks ASAP"
		echo "This includes i.e. calling all job threads at once and waiting for them to"
		echo "finish instead of calling them one-by-one and blocking main thread"
		echo "Due to that, OS may become unresponsive when ArchiKitchen is performing a task"
		echo "Usually it's a good idea to keep it ON, unless you have a very good reason"
		echo "for forcing ArchiKitchen to run in a single-thread mode"
		echo "--------------------------------------------------------------------------------"
		echo "p	- Full performance switch"
		echo "x	- Go back"
		echo "--------------------------------------------------------------------------------"
		read -p "CHOICE: " CHOICE
		case "$CHOICE" in
			p|P)
				if ($FULLPERFORMANCE); then
					FULLPERFORMANCE=false
				else
					FULLPERFORMANCE=true
				fi
				;;
			x|X) return 0
		esac
	done
}

################################################################
#  ____  _____ ____  ____  _____ ____    _  _____ _____ ____   #
# |  _ \| ____|  _ \|  _ \| ____/ ___|  / \|_   _| ____|  _ \  #
# | | | |  _| | |_) | |_) |  _|| |     / _ \ | | |  _| | | | | #
# | |_| | |___|  __/|  _ <| |__| |___ / ___ \| | | |___| |_| | #
# |____/|_____|_|   |_| \_\_____\____/_/   \_\_| |_____|____/  #
#                                                              #
################################################################

############################
#   ____ ___  ____  _____  #
#  / ___/ _ \|  _ \| ____| #
# | |  | | | | |_) |  _|   #
# | |__| |_| |  _ <| |___  #
#  \____\___/|_| \_\_____| #
#                          #
############################
while :; do
	clear

	PRINT_BANNER

	if [ -z "$ACTIVE_PROJECT" ]; then
		DO_SETPROJECT
		continue
	fi

	PRINT_PROJECT_STATUS
	PRINT_ROM_STATUS
	PRINT_SWITCHES
	read -p "CHOICE: " CHOICE
	case "$CHOICE" in
		ak|AK) PAGE_SETTINGS ;;
		a|A) CHANGE_ARCHITECTURE ;;
		adi|ADI) ARCHIDROID_INITD ;;
		d|D) DEODEX ;;
		z|Z) ZIPALIGN ;;
		r|R) ROOT ;;
		b|B) BUSYBOX ;;
		ba|BA) BOOTANIMATION ;;
		i|I) INITD ;;
		adb|ADB) ADB ;;
		ku|KU) KERNEL_EXTRACT ;;
		kr|KR) KERNEL_REPACK ;;
		ka|KA) KERNEL_ABORT ;;
		bbe|BBE) BUILD "EXPERT" ;;
		bb|BB)
			if ($ALLFINE); then
				BUILD
			else
				echo "ERROR: Can't build ROM in actual status, please check warings above and correct them!"
				PRESS_ENTER
			fi
			;;
		x|X) exit 0
	esac
done

